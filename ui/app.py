import streamlit as st
import asyncio
import threading
import time
import json
import os

from ui.api_client import APIClient
from ui.mission_builder import MissionBuilder
from ui.session_replay import SessionReplay
from agent.config import Config # Import Config for paths

# --- Streamlit Page Configuration ---
st.set_page_config(
    page_title="Chimera Overlord - Mission Control",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load custom CSS
with open("ui/styles.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# --- Initialize Session State ---
if "api_client" not in st.session_state:
    st.session_state.api_client = APIClient()
    st.session_state.api_client.connect()

if "mission_builder" not in st.session_state:
    st.session_state.mission_builder = MissionBuilder()

if "session_replay" not in st.session_state:
    st.session_state.session_replay = SessionReplay()

if "mission_status_updates" not in st.session_state:
    st.session_state.mission_status_updates = {}

if "mission_history" not in st.session_state:
    st.session_state.mission_history = st.session_state.mission_builder.get_mission_history()

# --- RabbitMQ Status Consumer (Background Thread) ---
def start_status_consumer(api_client: APIClient):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    api_client.start_consuming_status_updates()

if "status_consumer_thread" not in st.session_state:
    st.session_state.status_consumer_thread = threading.Thread(
        target=start_status_consumer,
        args=(st.session_state.api_client,),
        daemon=True
    )
    st.session_state.status_consumer_thread.start()

# --- UI Functions ---
def display_mission_status():
    st.subheader("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    if not st.session_state.mission_status_updates:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà.")
        return

    for mission_id, status_data in st.session_state.mission_status_updates.items():
        st.markdown(f"### ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à ID: `{mission_id}`")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** <span class=\"status-{status_data.get("status", "unknown")}\">{status_data.get("status", "N/A").replace("_", " ").title()}</span>", unsafe_allow_html=True)
        with col2:
            st.write(f"**‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:** <span class=\"status-{status_data.get("outcome", "unknown")}\">{status_data.get("outcome", "N/A").replace("_", " ").title()}</span>", unsafe_allow_html=True)
        with col3:
            st.write(f"**‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:** {status_data.get("message", "‡πÑ‡∏°‡πà‡∏°‡∏µ")}")
        
        if status_data.get("trace_file") and status_data.get("status") == "failed":
            if st.button(f"‡∏î‡∏π Trace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {mission_id}", key=f"trace_btn_{mission_id}"):
                st.session_state.session_replay.replay_trace(status_data["trace_file"])
                st.success(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Playwright Trace Viewer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {mission_id}...")
        st.markdown("--- ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö ---")

def display_mission_history():
    st.subheader("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à")
    if not st.session_state.mission_history:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à.")
        return

    # Reverse history to show most recent first
    sorted_history = sorted(st.session_state.mission_history, key=lambda x: x.get("start_time", ""), reverse=True)

    for mission in sorted_history:
        with st.expander(f"‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à {mission.get("mission_id", "N/A")} - {mission.get("target_website", "N/A")} ({mission.get("status", "N/A").title()})"):
            st.json(mission)
            if mission.get("trace_file") and mission.get("status") == "failed":
                if st.button(f"‡∏î‡∏π Trace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {mission.get("mission_id")}", key=f"hist_trace_btn_{mission.get("mission_id")}"):
                    st.session_state.session_replay.replay_trace(mission["trace_file"])
                    st.success(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Playwright Trace Viewer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {mission.get("mission_id")}...")

def display_card_management():
    st.subheader("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï")

    with st.form("add_card_form", clear_on_submit=True):
        st.write("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà")
        card_number = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1234-5678-9012-3456)")
        card_expiry = st.text_input("‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (MM/YY)")
        card_cvv = st.text_input("CVV")
        card_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£", ["Visa", "MasterCard", "American Express", "Discover", "Other"])
        card_nickname = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏±‡∏ï‡∏£ (‡πÄ‡∏ä‡πà‡∏ô: ‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏•‡∏±‡∏Å, ‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á)")

        submitted = st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ï‡∏£")
        if submitted:
            if card_number and card_expiry and card_cvv and card_nickname:
                card_details = {
                    "number": card_number.replace("-", "").strip(),
                    "expiry": card_expiry.strip(),
                    "cvv": card_cvv.strip(),
                    "type": card_type,
                    "nickname": card_nickname.strip()
                }
                card_id = st.session_state.mission_builder.add_new_card(card_details)
                st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ï‡∏£ \"{card_nickname}\" (ID: {card_id}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            else:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô.")

    st.markdown("--- ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏±‡∏ö ---")
    st.write("‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
    available_cards = st.session_state.mission_builder.get_available_cards()
    if not available_cards:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ.")
    else:
        for card_id, card_ref in available_cards.items():
            st.write(f"- **{card_ref.get("nickname", "N/A")}** (ID: `{card_id}`) - {card_ref.get("card_type", "N/A")}, ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ {card_ref.get("last4", "N/A")}")

def display_profile_management():
    st.subheader("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
    st.write("‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: `default_profile`")
    profile_info = st.session_state.mission_builder.get_profile_info("default_profile")
    st.write(f"**Trust Score:** {profile_info.get("trust_score", "N/A")}")
    st.info("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï.")

# --- Main App Layout ---
st.title("üöÄ Chimera Overlord - Mission Control")

# Sidebar for navigation
st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π")
page_selection = st.sidebar.radio(
    "",
    ["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"]
)

# Main content area based on selection
if page_selection == "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà":
    st.header("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà")
    with st.form("new_mission_form"):
        st.write("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à")
        target_website = st.text_input("‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô: https://www.apple.com/th/)",
                                        value="https://www.apple.com/th/")
        product_identifier = st.text_input("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô: iPhone 15 Pro Max 256GB)",
                                            value="iPhone 15 Pro Max 256GB")
        
        available_cards = st.session_state.mission_builder.get_available_cards()
        card_options = {f"{v.get("nickname", k)} (***{v.get("last4", "N/A")})": k for k, v in available_cards.items()}
        
        primary_card_display = st.selectbox("‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏•‡∏±‡∏Å", list(card_options.keys()))
        primary_card_id = card_options.get(primary_card_display)

        secondary_card_display = st.selectbox("‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏£‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)", ["‡πÑ‡∏°‡πà‡∏°‡∏µ"] + list(card_options.keys()))
        secondary_card_id = card_options.get(secondary_card_display) if secondary_card_display != "‡πÑ‡∏°‡πà‡∏°‡∏µ" else None

        force_warmup = st.checkbox("‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Warmup Turbo ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≤‡∏Å Trust Score ‡∏ï‡πà‡∏≥)", value=False)

        submitted = st.form_submit_button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à")
        if submitted:
            if not primary_card_id:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à.")
            elif not target_website or not product_identifier:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£.")
            else:
                mission_request = st.session_state.mission_builder.build_mission_request(
                    target_website=target_website,
                    product_identifier=product_identifier,
                    primary_card_id=primary_card_id,
                    secondary_card_id=secondary_card_id,
                    force_warmup=force_warmup
                )
                
                def mission_status_callback(status_data):
                    st.session_state.mission_status_updates[status_data["mission_id"]] = status_data
                    st.experimental_rerun() # Rerun to update UI with new status

                try:
                    mission_id = st.session_state.api_client.send_mission_request(mission_request, mission_status_callback)
                    st.success(f"‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à \"{mission_id}\" ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö \"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à\".")
                    st.session_state.mission_status_updates[mission_id] = {"mission_id": mission_id, "status": "queued", "outcome": "pending", "message": "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."}
                    st.experimental_rerun()
                except ConnectionError as e:
                    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Agent ‡πÑ‡∏î‡πâ: {e}. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Docker Compose ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà.")

elif page_selection == "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à":
    display_mission_status()
    # Auto-refresh mechanism (optional, can be heavy)
    # time.sleep(5)
    # st.experimental_rerun()

elif page_selection == "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à":
    display_mission_history()

elif page_selection == "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï":
    display_card_management()

elif page_selection == "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå":
    display_profile_management()


# --- Footer ---
st.markdown("""
<br><br><br>
<hr>
<p style="text-align: center; color: gray;">Chimera Overlord - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÇ‡∏î‡∏¢ Manus AI</p>
""", unsafe_allow_html=True)

# Refresh mission history on page load/rerun to ensure it's up-to-date
st.session_state.mission_history = st.session_state.mission_builder.get_mission_history()




